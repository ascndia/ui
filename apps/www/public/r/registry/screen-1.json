{
  "name": "screen-1",
  "type": "registry:section",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "section/screen-1.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport Image from \"next/image\"\nimport { motion } from \"framer-motion\"\nimport screen1 from \"public/product-overview.jpg\"\nimport screen4 from \"public/product-vault.jpg\"\nimport screen2 from \"public/screen-2.png\"\nimport screen3 from \"public/screen-3.png\"\nimport screen5 from \"public/screen-5.png\"\n\nlet interval: any\n\ntype Card = {\n  id: number\n  content: React.ReactNode\n  name: string\n}\n\nexport function Screens() {\n  return (\n    <div className=\" w-full relative pt-8 pb-4\">\n      <div className=\"relative z-10 flex flex-col items-center\">\n        <div className=\"text-center pb-14\">\n          <h3 className=\"text-4xl md:text-6xl font-medium\">The thin layer</h3>\n          <p className=\"mt-4 text-[#878787]\">\n            Bridging the gap between your bank and your accountants software.\n          </p>\n        </div>\n\n        <CardStack\n          items={[\n            {\n              id: 1,\n              name: \"Overview\",\n              content: (\n                <Image\n                  quality={100}\n                  alt=\"Dashboard - Overview\"\n                  src={screen1}\n                  width={1031}\n                  height={670}\n                  priority\n                  className=\"border border-border\"\n                />\n              ),\n            },\n            {\n              id: 2,\n              name: \"Tracker\",\n              content: (\n                <Image\n                  quality={100}\n                  alt=\"Dashboard - Tracker\"\n                  src={screen2}\n                  width={1031}\n                  height={670}\n                  className=\"border border-border\"\n                />\n              ),\n            },\n            {\n              id: 3,\n              name: \"Inbox\",\n              content: (\n                <Image\n                  quality={100}\n                  alt=\"Dashboard - Inbox\"\n                  src={screen3}\n                  width={1031}\n                  height={670}\n                  className=\"border border-border\"\n                />\n              ),\n            },\n            {\n              id: 4,\n              name: \"Vault\",\n              content: (\n                <Image\n                  quality={100}\n                  alt=\"Dashboard - Vault\"\n                  src={screen4}\n                  width={1031}\n                  height={670}\n                  className=\"border border-border\"\n                />\n              ),\n            },\n            {\n              id: 5,\n              name: \"Dashboard - Transactions\",\n              content: (\n                <Image\n                  quality={100}\n                  alt=\"Dashboard - Transactions\"\n                  src={screen5}\n                  width={1031}\n                  height={670}\n                  className=\"border border-border\"\n                />\n              ),\n            },\n          ]}\n        />\n      </div>\n\n      <div className=\"dotted-bg absolute w-[10000px] h-full top-0 -left-[5000px]\" />\n    </div>\n  )\n}\n\nexport const CardStack = ({\n  items,\n  offset,\n  scaleFactor,\n}: {\n  items: Card[]\n  offset?: number\n  scaleFactor?: number\n}) => {\n  const CARD_OFFSET = 5\n  const SCALE_FACTOR = scaleFactor || 0.06\n  const [cards, setCards] = useState<Card[]>(items)\n\n  useEffect(() => {\n    startFlipping()\n    setCards(items)\n    return () => clearInterval(interval)\n  }, [])\n\n  const startFlipping = () => {\n    interval = setInterval(() => {\n      setCards((prevCards: Card[]) => {\n        const newArray = [...prevCards] // create a copy of the array\n        newArray.unshift(newArray.pop()!) // move the last element to the front\n        return newArray\n      })\n    }, 5000)\n  }\n\n  const onChangeCardByIndex = (index: any) => {\n    const item = cards.at(index)\n    setCards([item!, ...cards.slice(0, index), ...cards.slice(index + 1)])\n  }\n\n  const onChangeCard = (item: any) => {\n    const index = cards.findIndex((card) => card.id === item.id)\n    setCards([item, ...cards.slice(0, index), ...cards.slice(index + 1)])\n  }\n\n  // TODO: Get screen width\n  return (\n    <div\n      className=\"relative h-[220px] md:h-[670px] w-full z-10\"\n      onMouseEnter={() => clearInterval(interval)}\n    >\n      {cards.map((card, index) => {\n        return (\n          <motion.div\n            key={card.id}\n            className=\"absolute h-[220px] md:h-[670px] w-full items flex flex-col justify-between\"\n            style={{\n              transformOrigin: \"top center\",\n              display: index > 2 ? \"none\" : \"block\",\n            }}\n            whileHover={{\n              top: index > 0 ? index * -CARD_OFFSET - 30 : undefined,\n              transition: { duration: 0.3 },\n            }}\n            animate={{\n              top: index * -CARD_OFFSET,\n              scale: 1 - index * SCALE_FACTOR, // decrease scale for cards that are behind\n              zIndex: cards.length - index, //  decrease z-index for the cards that are behind\n            }}\n            onMouseEnter={() => clearInterval(interval)}\n          >\n            <div onClick={() => onChangeCardByIndex(index)}>{card.content}</div>\n          </motion.div>\n        )\n      })}\n    </div>\n  )\n}\n",
      "type": "registry:section",
      "target": ""
    }
  ]
}